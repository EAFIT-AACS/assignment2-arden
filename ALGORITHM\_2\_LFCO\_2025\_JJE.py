# ALGORITHM_2_LFCO_2025_JJE.py
# This program implements a PDA that recognizes strings generated by grammar G.
# Grammar G: S -> a S b | ε, which defines the language {a^n b^n}.

import ALGORITHM_1_LFCO_2025_JJE as AL1

def run_pda(input_string):
    """
    Simulates a PDA for the language {a^n b^n}.
    The PDA pushes a marker for each 'a' and pops for each 'b'.
    Returns a tuple (accepted, history) where:
      - accepted: True if the string is accepted, False otherwise.
      - history: a list of configurations in the form (position, symbol, stack).
    """
    history = []
    stack = []
    position = 0
    # Record initial configuration
    history.append((position, 'start', stack.copy()))
    
    for symbol in input_string:
        history.append((position, symbol, stack.copy()))
        if symbol == 'a':
            stack.append('A')
        elif symbol == 'b':
            if stack and stack[-1] == 'A':
                stack.pop()
            else:
                history.append((position, symbol, stack.copy()))
                return False, history
        else:
            # Invalid symbol encountered
            history.append((position, symbol, stack.copy()))
            return False, history
        position += 1
    
    history.append((position, 'end', stack.copy()))
    accepted = (len(stack) == 0)
    return accepted, history
