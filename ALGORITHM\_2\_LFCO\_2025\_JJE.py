# ALGORITHM_2_LFCO_2025_JJE.py
# This program implements a PDA that recognizes strings generated by grammar G.
# Grammar G: S -> a S b | ε, which defines the language {a^n b^n}.

def run_pda(input_string):
    """
    Simulates a PDA for the language {a^n b^n}.
    The PDA pushes a marker for each 'a' and pops for each 'b'.
    Returns a tuple (accepted, history) where:
      - accepted: True if the string is accepted, False otherwise.
      - history: a list of configurations in the form (position, symbol, stack).
    """
    history = []
    stack = []
    position = 0
    # Record initial configuration
    history.append((position, 'start', stack.copy()))
    
    for symbol in input_string:
        history.append((position, symbol, stack.copy()))
        if symbol == 'a':
            stack.append('A')
        elif symbol == 'b':
            if stack and stack[-1] == 'A':
                stack.pop()
            else:
                history.append((position, symbol, stack.copy()))
                return False, history
        else:
            # Invalid symbol encountered
            history.append((position, symbol, stack.copy()))
            return False, history
        position += 1
    
    history.append((position, 'end', stack.copy()))
    accepted = (len(stack) == 0)
    return accepted, history

def main():
    input_file = "generated_strings.txt" # Archivo de entrada con las cadenas generadas por el algoritmo 1
    output_file = "accepted_strings.txt"  # Nuevo archivo para almacenar los aceptados
    accepted_strings_pda = []
    
    try:
        with open(input_file, "r") as file:
            lines = file.readlines()

        test_strings = []
        for line in lines:
            line = line.strip().replace("'", "")  # Elimina espacios y comillas
            if line and not line.startswith("Accepted Strings") and not line.startswith("Rejected Strings"):
                test_strings.append(line)  # Solo guarda las cadenas válidas
                
        with open(output_file, "w") as out_file:  # Abrir archivo de salida
            for s in test_strings:
                accepted, history = run_pda(s)
                result = "Accepted" if accepted else "Rejected"
                print(f"Input: '{s}' -> {result}")
                print("History of configurations:")
                for pos, sym, st in history:
                    print(f"  Pos {pos}: Symbol: {sym}, Stack: {st}")
                print("-" * 40)

                if accepted:
                    accepted_strings_pda.append(s)
                    out_file.write(f"'{s}'\n")  # Escribir en el archivo

            print(f"Accepted strings saved in '{output_file}'.")
                
    except FileNotFoundError:
        print(f"Error: File '{input_file}' not found. Please provide a valid input file.")

    return accepted_strings_pda
    
if __name__ == "__main__":
    main()
