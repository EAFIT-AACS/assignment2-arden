from flask import Flask, Response, render_template_string
from ALGORITHM_2_LFCO_2025_JJE import main as m2
from ALGORITHM_3_LFCO_2025_JJE import leftmost_derivation as lf

app = Flask(__name__)

# Define a constant for the content type
CONTENT_TYPE_TEXT_PLAIN = 'text/plain; charset=utf-8'

# Ruta principal con botones para cada algoritmo
@app.route('/')
def home():
    html = '''
    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Algoritmos</title>
    </head>
    <body>
        <h1>Seleccione un algoritmo</h1>
        <button onclick="window.location.href='/algoritmo1'">Algoritmo 1</button>
        <button onclick="window.location.href='/algoritmo2'">Algoritmo 2</button>
        <button onclick="window.location.href='/algoritmo3'">Algoritmo 3</button>
    </body>
    </html>
    '''
    return render_template_string(html)

@app.route('/algoritmo1', methods=['GET'])
def algoritmo1_route():
    input_file = "generated_strings.txt"
    try:
        with open(input_file, "r") as file:
            lines = file.readlines()

        test_strings = []
        for line in lines:
            line = line.strip().replace("'", "")  # Elimina espacios y comillas
            if line and not line.startswith("Accepted Strings") and not line.startswith("Rejected Strings"):
                test_strings.append(line)  # Solo guarda las cadenas válidas
    except FileNotFoundError:
        print(f"Error: File '{input_file}' not found. Please provide a valid input file.")
    
    # Convertir la salida en un formato adecuado para texto plano
    salida_formateada = "\n".join(test_strings)  # Suponiendo que resultado es una lista de strings
    return Response(salida_formateada, content_type=CONTENT_TYPE_TEXT_PLAIN)

@app.route('/algoritmo2', methods=['GET'])
def algoritmo2_route():
    resultado = m2()  # Llamamos a la función del algoritmo 2
    # Convertir la salida en un formato adecuado para texto plano
    salida_formateada = "\n".join(resultado)  # Suponiendo que resultado es una lista de strings
    return Response(salida_formateada, content_type=CONTENT_TYPE_TEXT_PLAIN)

@app.route('/algoritmo3', methods=['GET'])
def algoritmo3_route():
    input_file = "accepted_strings.txt"  # Archivo con las cadenas aceptadas
    try:
        with open(input_file, "r") as file:
            lines = file.readlines()

        test_strings = []
        for line in lines:
            line = line.strip().replace("'", "")  # Elimina comillas y espacios
            if line:  # Evita procesar líneas vacías
                test_strings.append(line)

        derivation_results = ""
        for s in test_strings:
            derivation = lf(s)
            if derivation:
                # Agregar cada derivación al resultado
                derivation_results += f"<h2>Leftmost derivation for string: '{s}'</h2><pre>"
                indent = ""
                for step in derivation:
                    derivation_results += indent + step + "\n"
                    indent += "  "  # Aumentar la indentación para cada paso
                derivation_results += "</pre><hr>"
            else:
                derivation_results += f"<p>The string '{s}' is not generated by the grammar.</p><hr>"

        # Devolver los resultados en formato HTML con las derivaciones
        return render_template_string(f'''
            <html lang="es">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Derivación de Algoritmo 3</title>
            </head>
            <body>
                <h1>Resultado de Algoritmo 3 - Derivación Izquierda</h1>
                {derivation_results}
                <br>
                <a href="/">Volver al inicio</a>
            </body>
            </html>
        ''')

    except FileNotFoundError:
        return f"<p>Error: File '{input_file}' not found. Please provide a valid input file.</p>"

if __name__ == '__main__':
    app.run(debug=True)
